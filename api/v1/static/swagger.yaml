openapi: 3.0.0
info:
  title: JWS COLLECTIONS API
  version: 1.0.0
  description: API for managing orders, products, users, and checkout in an e-commerce system.

servers:
  - url: /api/v1
    description: Main API server

paths:
  /login:
    post:
      summary: User login
      description: Handles user login and issues JWT tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "yourpassword"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials"
  /signup:
    post:
      summary: User Signup
      description: Handles user registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "yourpassword"
                username:
                  type: string
                  example: "Bobby"
                firstname:
                  type: string
                  example: "Bob"
                lastname:
                  type: string
                  example: "Dylan"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
        '400':
          description: Email address already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email address already exists"
        '500':
          description: Error in processing data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error Message Expected"
  /carts:
    get:
      summary: Get all carts
      description: Returns JSON format of all carts. Requires admin role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of carts
          content:
            application/json:
              schema:
                type: array
                properties:
                  items:
                    type: object
                    properties:
                      __class__:
                        type: string
                        example: CartItem
                      _price:
                        type: integer
                        example: 170
                      _total_price:
                        type: integer
                        example: 340
                      cart_id:
                        type: string
                        example: "1ba4dc40-53d1-43e8-93e3-c84bc2a3f900"
                      created_at:
                        type: string
                        format: date-time
                        example: "2024-08-18T01:57:19.023586"
                      id:
                        type: string
                        example: "5afdf879-e87d-4ea4-acdc-865d2328e136"
                      quantity:
                        type: integer
                        example: 2
                      shoe_id:
                        type: string
                        example: "57e66b76-35a9-4435-a8fc-a1d16fe971e0"
                      shoe_name:
                        type: string
                        example: Air Jordan 1 Utility
                      updated_at:
                        type: string
                        format: date-time
                        example: "2024-08-18T01:57:19.023586"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: "No cart available in database"
  /carts/{id}:
    get:
      summary: Get cart by ID
      description: Returns cart based on ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The cart ID
      responses:
        '200':
          description: A cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: object
                    properties:
                      __class__:
                        type: string
                        example: CartItem
                      _price:
                        type: integer
                        example: 170
                      _total_price:
                        type: integer
                        example: 340
                      cart_id:
                        type: string
                        example: "1ba4dc40-53d1-43e8-93e3-c84bc2a3f900"
                      created_at:
                        type: string
                        format: date-time
                        example: "2024-08-18T01:57:19.023586"
                      id:
                        type: string
                        example: "5afdf879-e87d-4ea4-acdc-865d2328e136"
                      quantity:
                        type: integer
                        example: 2
                      shoe_id:
                        type: string
                        example: "57e66b76-35a9-4435-a8fc-a1d16fe971e0"
                      shoe_name:
                        type: string
                        example: Air Jordan 1 Utility
                      updated_at:
                        type: string
                        format: date-time
                        example: "2024-08-18T01:57:19.023586"
                  user_id:
                    type: string
        '404':
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cart not found"
  /cart:
    get:
      summary: Get user's cart
      description: Retrieve the current user's cart.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                  user_id:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
  /cart/add:
    post:
      summary: Add item to cart
      description: Add an item to the current user's cart.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shoe_id:
                  type: string
                  example: "shoe123"
                quantity:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Item added to cart successfully"
        '404':
          description: User or shoe not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
  /orders:
    get:
      summary: Get all orders
      description: Returns a JSON format of all orders.
      security:
        - bearerAuth: []
        - role: ['admin']
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Order ID
                    user_id:
                      type: string
                      description: ID of the user who placed the order
                    items:
                      type: array
                      items:
                        type: object
                        properties:
                          product_id:
                            type: string
                            description: Product ID
                          quantity:
                            type: integer
                            description: Quantity of the product
                    total:
                      type: number
                      format: float
                      description: Total cost of the order
                    status:
                      type: string
                      description: Current status of the order
        '404':
          description: No orders available yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  Error:
                    type: string
                    example: 'No order available yet'

  /orders/{id}:
    get:
      summary: Get an order by ID
      description: Returns an order based on the provided ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the order to retrieve
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Order ID
                  user_id:
                    type: string
                    description: ID of the user who placed the order
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: string
                          description: Product ID
                        quantity:
                          type: integer
                          description: Quantity of the product
                  total:
                    type: number
                    format: float
                    description: Total cost of the order
                  status:
                    type: string
                    description: Current status of the order
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Order not found'

  /checkout:
    post:
      summary: Handle checkout
      description: Handles the checkout process for a user's cart.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Checkout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Checkout successful'
                  order_id:
                    type: string
                    description: ID of the created order
        '400':
          description: Cart is empty or other bad request error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Cart is empty'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'User not found'
  
  /products:
    get:
      summary: Get all products
      description: Returns a JSON format of all products with optional filtering and pagination.
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of products per page
          required: false
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          description: Filter products by category
          required: false
          schema:
            type: string
        - name: brand
          in: query
          description: Filter products by brand
          required: false
          schema:
            type: string
        - name: min_price
          in: query
          description: Filter products with a minimum price
          required: false
          schema:
            type: number
            format: float
        - name: max_price
          in: query
          description: Filter products with a maximum price
          required: false
          schema:
            type: number
            format: float
        - name: color
          in: query
          description: Filter products by color
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of products with pagination details
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  per_page:
                    type: integer
                  total_products:
                    type: integer
                  total_pages:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '404':
          description: No products available
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  per_page:
                    type: integer
                  total_products:
                    type: integer
                  total_pages:
                    type: integer
                  products:
                    type: array
                    items:
                      type: object

    post:
      summary: Create a new product
      description: Creates a new product in the catalog. Admin access required.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shoe_name:
                  type: string
                  example: "Air Max 95"
                shoe_category:
                  type: string
                  example: "sneakers"
                shoe_brand:
                  type: string
                  example: "Nike"
                shoe_price:
                  type: float
                  example: 10.0
                shoe_color:
                  type: string
                  example: "brown"
                shoe_image:
                  type: string
                  example: "https://www.imgur.com/..."
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "20303dw.."
                  shoe_image:
                    type: string
                    example: "https://images.puma.com/.."                  
                  shoe_price:
                    type: float
                    example: 121
                  created_at:
                    type: string
                    example: "2024-08-17T20:04:01.063292"
                  shoe_brand:
                    type: string
                    example: "Puma"
                  shoe_category:
                    type: string
                    example: "sneakers"
                  shoe_color:
                    type: string
                    example: "yellow"
                  shoe_name:
                    type: string
                    example: "Wild ..."
                  updated_at:
                    type: string
                    example: "2024-08-17T20:04:01.063292"
        '400':
          description: Bad request or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid data'

  /products/{id}:
    get:
      summary: Get a product by ID
      description: Returns product details based on the provided ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to retrieve
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Product not found'

    put:
      summary: Update a product
      description: Updates product details based on the provided ID. Admin access required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to retrieve
      security:
        - bearerAuth: []
        - role: ['admin']
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                shoe_name:
                  type: string
                shoe_category:
                  type: string
                shoe_brand:
                  type: string
                shoe_price:
                  type: number
                  format: float
                shoe_color:
                  type: string
        required: true
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "20303dw.."
                  shoe_image:
                    type: string
                    example: "https://images.puma.com/.."                  
                  shoe_price:
                    type: float
                    example: 121
                  created_at:
                    type: string
                    example: "2024-08-17T20:04:01.063292"
                  shoe_brand:
                    type: string
                    example: "Puma"
                  shoe_category:
                    type: string
                    example: "sneakers"
                  shoe_color:
                    type: string
                    example: "yellow"
                  shoe_name:
                    type: string
                    example: "Wild ..."
                  updated_at:
                    type: string
                    example: "2024-08-17T20:04:01.063292"
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Product not found'

    delete:
      summary: Delete a product
      description: Deletes a product based on the provided ID. Admin access required.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to retrieve
      security:
        - bearerAuth: []
        - role: ['admin']
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Product deleted successfully'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Product not found'

  /users:
    get:
      summary: Get all users
      description: Returns a JSON format of all users. Admin access required.
      security:
        - bearerAuth: []
        - role: ['admin']
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                example: [{...}, {...}, ..., {...}]
        '404':
          description: No users available
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'No user was created'

  /users/{user_id}:
    get:
      summary: Get a user profile by ID
      description: Returns user details based on the provided ID.
      security:
       - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: string
                example: "{...}"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'

    put:
      summary: Update a user profile
      description: Updates user details based on the provided ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                example: {...}
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
